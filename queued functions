



for (let i=0;i<38;i++){
  this.dtstar[i] = 25/((this.ROCstarcrp[i] + this.ROCstarcrp[i+1])/2);
  this.tetastar[i] = math.asin((this.ROCstarcrp[i] + this.ROCstarcrp[i+1])/2/this.state.vmiddle[i]);
  this.dxstar[i] = 25/math.tan(this.tetastar[i]);
}
// this.c1 = linear.linear(0.9, this.state.M, this.state.Cmax[1];
// this.c2 = linear.linear(0.9, this.state.M, this.state.Cmax[2];
// this.T1 = linear.linear(0.9, this.state.M, this.state.Tmax[1];
// this.c2 = linear.linear(0.9, this.state.M, this.state.Tmax[2];
// cd = linar.linear(500, [0 3048], [this.c1, this.c2] )/1000000*9.81;
// Td = linar.linear(500, [0 3048], [this.T1, this.T2] )*1000;
this.WWf2=this.state.c_d*this.state.T_d*math.sum(this.dtstar);
t_total = math.sum(this.dtstar) + math.max(this.tt);
x_total = math.sum(this.dxstar) + math.max(this.xx);
this.WWf = this.WWf1 + this.WWf2;    //start of climb
thi.v_c_base = 0.9*this.state.Va;
this.climb = this.calculateClimb();    //start of descend
this.M_d = math.dotDivide(this.state.V_d, this.state.Va_d);
this.CL_d = math.dotDivide(2*(this.state.W_d/this.state.S), (math.dotMultiply(this.state.ro_d, math.dotMultiply(this.state.V_d, this.state.V_d))));
for (let i=0;i<38;i++){

    if (M_d[i]<=0.8)
        this.CD_d[i] = 0.4353*this.CL_d[i], 0.3091*this.CL_d[i] - 0.0844*this.CL_d[i] + 0.0257;
    if (M_d[i]>0.8 && M_d[i]<=1)
        this.CD_d[i] = 0.2843*this.CL_d[i], 0.3091*this.CL_d[i] - 0.0131*this.CL_d[i] + 0.0188;
    if (M_d[i]>1 && M_d[i]<=1.2)
        this.CD_d[i] = 0.2490*this.CL_d[i], 0.3091*this.CL_d[i] - 0.0051*this.CL_d[i] + 0.0358;
    if (M_d[i]>1.2)
        this.CD_d[i] = 0.3091*this.CL_d[i], 0.3091*this.CL_d[i] - 0.0078*this.CL_d[i] + 0.0401;
}
this.D_d = math.dotMultiply(0.5*this.state.rod*this.state.Vd*this.state.Vd*this.state.S, this.CD_d);
this.myROD = this.state.Vd*(0 - this.D_d)/this.W_d;
this.descend=this.calculateaDesecend() ;    //statrt of full AB thrust
